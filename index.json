[{"content":"Nota: Se trata de un art√≠culo de opini√≥n basado en mis conocimientos y experiencias a d√≠a de hoy (2024). Mi perspectiva sobre la industria del software cambia con el tiempo. Es una reflexi√≥n que no busca ofrecer soluciones concretas, sino presentar una visi√≥n del problema.\nüò≤ No me importa documentar Hace unos a√±os durante una reuni√≥n rutinaria de equipo, probablemente en una daily, pronunci√© estas controvertidas palabras sobre la finalizaci√≥n de un entregable: \u0026ldquo;no os preocup√©is, yo me encargo, no me importa documentar el proceso\u0026rdquo;.\nEn ese momento not√© en mis compa√±eros una mezcla de alivio e incredulidad, y se sucedieron muecas de aprobaci√≥n mezcladas con comentarios del tipo: \u0026ldquo;perfecto, porque yo ODIO documentar\u0026rdquo;.\nEs un recuerdo formado por m√°s de una experiencia al respecto pero supongo que ya me entend√©is. Documentar no gusta, tiene fama de labor tediosa y normalmente suele ser el colof√≥n a un trabajo m√°s o menos complejo que el equipo tiene muchas ganas de entregar o simplemente dar por finalizado. Es una barrera ante nuestro af√°n de marcar algo como completado.\nLa realidad es que en ciertos escenarios la documentaci√≥n no es ni siquiera opcional, pero determinadas corrientes de pensamiento nos han hecho ver este acto casi con desprecio, como un ap√©ndice aburrido a nuestro trabajo creativo como desarrolladores de software.\nMi intenci√≥n con esta entrada (o serie de entradas, a√∫n no lo he decidido) es desmitificar el proceso y ver la documentaci√≥n con otros ojos. Porque uno puede estar colgado de una cruz pero decidir silbar.\nüö® ¬øCu√°ndo nos acordamos de la documentaci√≥n? Detestamos la documentaci√≥n pero ella, sin rencor, siempre aparece para salvarnos en estas situaciones tan cotidianas: cuando alguien nuevo llega, cuando alguien importante se va o cuando suena el tel√©fono rojo:\nOnboarding: Sobre este punto hay muchos y muy buenos art√≠culos y la buena documentaci√≥n s√≥lo es uno de los factores de √©xito. Tras mis √∫ltimos procesos de incorporaci√≥n puedo decir que las piezas de documentaci√≥n m√°s √∫tiles han sido los organigramas de empresa, los handbooks actualizados sobre el d√≠a a d√≠a (vacaciones y ausencias, planes de carrera, etc.) y las gu√≠as concisas de preparaci√≥n de entornos u obtenci√≥n de crendenciales. Parecen temas muy comunes pero creedme que hay mundos de distancia entre unas compa√±√≠as y otras.\nMarcha de compa√±eros a otros equipos o empresas: En estos casos las alertas se activan normalmente de parte de los gestores o managers. Siempre he notado en estos casos temores infundados sobre personas que con su marcha puedan llevarse consigo cierta informaci√≥n importante que no est√° redactada en ning√∫n lugar. Si te pasa o ha pasado, es una mala se√±al, y no vas a solucionarlo escribiendo p√°ginas y p√°ginas en Confluence a √∫ltima hora. M√°s adelante hablar√© de c√≥mo protegerse ante estas situaciones.\nIncidencias o p√©rdidas de servicio: Este punto es crucial porque suele ser normal que los equipos de desarrollo no tengan una experiencia perfectamente uniforme y en periodos vacacionales o bajas prolongadas de personal clave puedes encontrarte con momentos en los que aquella persona que lo solucionaba todo no est√© presente. Otra bandera roja si me lo permit√≠s, pero que tiene arreglo m√°s all√° de eternos manuales con prodecimientos de arranque, rollback o resoluci√≥n de incidencias.\nüôÖ Siempre rechazamos deliberadamente lo que no nos motiva La paradoja de la documentaci√≥n no queda aqu√≠. Sabemos que en determinados escenarios, como los que he listado en el punto anterior, es fundamental.\nSin embargo, si interpelas directamente a tus compa√±eros y compa√±eras muy posiblemente no encuentres a demasiados que te digan que \u0026ldquo;la documentaci√≥n es in√∫til\u0026rdquo;.\nDe hecho, seguro que te has encontrado varias veces piezas de documentaci√≥n manifiestamente inservibles pero que el equipo no quiere eliminar porque \u0026ldquo;a lo mejor le sirve a alguien o est√°n all√≠ por alguna raz√≥n\u0026rdquo;. Una especie de \u0026lsquo;S√≠ndrome de Estocolmo digital\u0026rsquo; en el que generamos apego por algo que detestamos o que sabemos in√∫til.\nEsto me lleva a pensar que, de una manera u otra, apreciamos el valor intr√≠nseco de la documentaci√≥n pero no la manera de obtener dicho valor.\nPor ello en las siguientes entradas (s√≠, al final habr√° m√°s de una para que el texto no sea un ladrillo incomestible) intentar√© hablar de los mitos asociados a la documentaci√≥n y sobre alguna que otra t√©cnica para hacer del proceso una traves√≠a algo menos desagradable.\n‚ûï En resumen Nuestra percepci√≥n sobre la documentaci√≥n en el desarrollo de software est√° algo distorsionada.\nAunque muchos la consideran tediosa, en realidad es esencial en momentos clave, como en la integraci√≥n de nuevos empleados o durante incidentes cr√≠ticos. Es curioso c√≥mo, aunque reconocemos su importancia, pocos est√°n dispuestos a admitirlo abiertamente.\nY t√∫, ¬øde qu√© equipo eres?\n","permalink":"https://mdlcs.dev/posts/2024-04-documentation-i/","summary":"Nota: Se trata de un art√≠culo de opini√≥n basado en mis conocimientos y experiencias a d√≠a de hoy (2024). Mi perspectiva sobre la industria del software cambia con el tiempo. Es una reflexi√≥n que no busca ofrecer soluciones concretas, sino presentar una visi√≥n del problema.\nüò≤ No me importa documentar Hace unos a√±os durante una reuni√≥n rutinaria de equipo, probablemente en una daily, pronunci√© estas controvertidas palabras sobre la finalizaci√≥n de un entregable: \u0026ldquo;no os preocup√©is, yo me encargo, no me importa documentar el proceso\u0026rdquo;.","title":"No te olvides de la documentaci√≥n (I)"},{"content":"Nota: Se trata de un art√≠culo de opini√≥n basado en mis conocimientos y experiencias a d√≠a de hoy (2024). Mi perspectiva sobre la industria del software cambia con el tiempo. Es una reflexi√≥n que no busca ofrecer soluciones concretas, sino presentar una visi√≥n del problema.\nüé¨ Un concepto en boca de todas Nos encanta hablar de deuda t√©cnica. Es un concepto propio, de nuestro nicho de conocimiento.\nPertenezcas a la empresa a la que pertenezcas, sea cual sea el evento IT al que asistas, las conversaciones sobre deuda t√©cnica est√°n ah√≠, a la vuelta de la esquina, acechando, esperando atraparte.\nSe tiende a pensar que algo que est√° en boca de todos es materia conocida, bien definida y de dominio p√∫blico. Pero en realidad con este t√©rmino ocurre todo lo contrario, hay tantas cosas que podr√≠an ser deuda t√©cnica que el concepto ha ido perdiendo su esencia, enmascarando otros problemas reales que muchas veces nos averg√ºenza reconocer.\nüôÖ‚Äç‚ôÄÔ∏è Todo lo que NO es deuda t√©cnica Me encanta intentar definir conceptos desechando al principio caracter√≠sticas probablemente asumidas por todos, pero que se alejan del significado real de la expresi√≥n. Por ello, y siempre bajo mi opini√≥n, paso a enumerar las cosas que considero fuera de los l√≠mites de la deuda t√©cnica.\nü™≥ Bugs Me atrever√≠a a afirmar que esta es la parte que suscita m√°s consenso. Los bugs, errores, incidencias o c√≥mo quiera que los llames nunca son deuda t√©cnica.\nIncluso la existencia de muchos errores tampoco es deuda t√©cnica. Posiblemente pueda ser una consecuencia de ello, pero no m√°s.\nUn fallo de nuestro sistema es por definici√≥n inconsciente, no buscado. Por lo tanto, no lo podemos a√±adir a nuestra mochila de mejoras o prop√≥sitos. Arr√©glalo y pon los medios necesarios para que no vuelva a suceder.\nüîÑ Actualizaci√≥n de dependencias Algunas de las tareas cl√°sicas en cualquier tablero o backlog de deuda t√©cnica son las de actualizaci√≥n de dependencias, librer√≠as o frameworks.\nEntonces, si son tan habituales, ¬øpor qu√© considero que no deber√≠an asociarse al concepto mencionado?\nEl mundo del desarrollo de software es bastante relativista, antes o despu√©s alguien te dir√° la palabra \u0026ldquo;depende\u0026rdquo; aludiendo a que las decisiones son dependientes del contexto y que en el √°mbito tecnol√≥gico no hay respuestas absolutas o t√©cnicas infalibles. Sin entrar de lleno en la veracidad o no de esta afirmaci√≥n, lo que puedo decir es que en la programaci√≥n, como en la vida, hay alguna que otra regla casi inviolable y una de ellas es que \u0026ldquo;el software evoluciona y se degenera con el tiempo\u0026rdquo;.\nTodo el mundo sabe (espero) que cuando comienzas un nuevo proyecto tendr√°s que mantenerlo: los lenguajes avanzar√°n, los frameworks quedar√°n obsoletos o descubrir√°n vulnerabilidades en tus librer√≠as.\nPor ello, tu estrategia de mantenimiento deber√≠a ser un pilar fundamental de tu organizaci√≥n. Si omites deliberadamente estos procesos de actualizaci√≥n con la t√≠pica frase de \u0026ldquo;si funciona no lo toques\u0026rdquo; pero luego apresuras a tu equipo a actualizar vuestros servicios porque \u0026ldquo;dice AWS que dejar√° de dar soporte a la tecnolog√≠a X\u0026rdquo;, el problema no es de deuda t√©cnica, sino de cultura y modos de trabajo.\nüéÅ C√≥digo heredado En mi opini√≥n, surge una controversia al calificar como deuda t√©cnica al c√≥digo de proyectos que, en ocasiones, nos asignan y que no ha sido desarrollado por nuestro equipo.\nFrecuentemente, lo que recibimos no cumple con las expectativas de calidad, es dif√≠cil de entender y presenta obst√°culos al agregar nuevas funcionalidades. Esta situaci√≥n es com√∫n y, adem√°s, genera estr√©s y tensi√≥n innecesarios en las personas.\nNo obstante, estas circunstancias no cumplen con la definici√≥n cl√°sica de deuda t√©cnica, ya que no podemos asumir responsabilidad directa por las acciones y el contexto vivido por otros. Adem√°s, estos momentos pueden desembocar en un bloqueo operativo que no puede abordarse en peque√±os incrementos durante nuestras iteraciones habituales.\nEs esencial afrontar la calidad y el rendimiento de estos proyectos, pero asignar recursos de manera m√°s espec√≠fica, como la creaci√≥n de grupos de trabajo para tareas de refactorizaci√≥n o la extracci√≥n puntual de funcionalidades hacia otros servicios, puede ser m√°s efectivo.\nüíæ Mejoras que quedaron en el olvido Otro de los grandes males que asolan a la industria es el exceso de optimismo sobre el tiempo que tendremos para modernizar nuestros productos. Podr√≠a apostar contigo, sin posibilidad de perder, que has estado en alg√∫n proyecto en cuyo backlog, muy en el fondo, resid√≠an tareas de mejora que nunca nadie tuvo tiempo de acometer.\nTodos tenemos en mente esos ambiciosos \u0026ldquo;Improve performance\u0026rdquo; o \u0026ldquo;Revamp persistence layer\u0026rdquo; que normalmente tienen unos n√∫meros de tarea en Jira extremadamente bajos y que cre√≥ una hero√≠na desconocida para ti, la cual abandon√≥ la empresa hace a√±o y medio.\n¬øEs eso deuda t√©cnica? Me temo que no.\nSin contexto y cercan√≠a temporal, las propuestas de mejora no tienen valor. Mi consejo es que te armes de voluntad, dejes el apego irracional a un lado y permitas que esas tareas se acomoden tranquilamente en el bulevar de tus sue√±os rotos. Elim√≠nalas y re-analiza el problema sobre la base de las circunstancias actuales. Farewell!\nü§ù Adaptaci√≥n de nuevos acuerdos de equipo Como √∫ltimo punto quiero destacar como antipatr√≥n de deuda t√©cnica todas aquellas tareas que nacen de cambios en los acuerdos de equipo.\n¬øEn serio has propuesto una mejora sin evaluar el impacto y el coste de cambio en tu base de c√≥digo actual? Si la respuesta es afirmativa, deber√≠as repensar tu estrategia.\nTodo cambio en las convenciones internas que nos damos nosotros mismos tendr√≠a que tener en cuenta su coste de adopci√≥n.\nY la justificaci√≥n para alejar estas tareas del t√©rmino \u0026ldquo;deuda t√©cnica\u0026rdquo; es simple: en muchos casos dichas convenciones son una recomendaci√≥n para mejorar la uniformidad del c√≥digo (elecci√≥n entre librer√≠as similares, modo de dise√±ar una API, convenciones de nombres, capas y responsabilidades de la arquitectura), acciones que no presentan una mejora t√©cnica per se, sino m√°s bien una preferencia para dotar a nuestros proyectos de una mayor cohesi√≥n.\nüßê Entonces, ¬øqu√© es la deuda t√©cnica? Si tuviese que dar una definici√≥n concisa para mi visi√≥n del concepto de deuda t√©cnica, ser√≠a la que sigue:\nDecisi√≥n de desarrollo u organizaci√≥n que se toma, de manera deliberada, como un atajo o soluci√≥n de contingencia a un problema concreto y acotado y con la que adquirimos un compromiso de resoluci√≥n real y fijado en el tiempo.\nAhora vayamos punto por punto repasando cada una de las caracter√≠sticas:\nVoluntaria o deliberada: Bajo mi prisma, no existe la deuda t√©cnica externa. Para que la podamos considerar como tal debe provenir de nosotros mismos en un ejercicio de aceptaci√≥n voluntaria. Por el mismo motivo, no puedo considerar deuda t√©cnica a algo impuesto por un equipo o departamento externo ajeno a responsabilidades t√©cnicas. Conocida y aceptada: En el momento de crear la deuda t√©cnica debemos analizar el problema, aceptar la soluci√≥n a tomar como poco adecuada y sobre todo conocer la manera √≥ptima de realizarlo en el futuro (o al menos una propuesta). No podemos admitir como deuda t√©cnica la falta de conocimiento o contexto en un momento pasado. Compromiso de soluci√≥n: El punto m√°s odiado. No hay deuda t√©cnica si no existe un compromiso cierto de devoluci√≥n de esa deuda. Como mencionaba antes, si en el fondo de tu backlog se acumulan tareas y m√°s tareas de mejora, no tienes un problema de deuda t√©cnica. Hazme caso, es otra cosa. De √°mbito reducido: La deuda tiene que ser concreta para que su resoluci√≥n sea accesible e incluso posible. No podemos considerar como deuda t√©cnica un conjunto de servicios o proyectos completos. El an√°lisis de las caracter√≠sticas de la deuda t√©cnica es importante, ya que de esa manera podremos anticiparnos a sus causas y encontrar soluciones. Tras reflexionar considero que hay tres or√≠genes comunes para este problema y tres soluciones obvias a dichas circunstancias:\nMi objetivo es exponer el problema y crear un marco de comunicaci√≥n, no aportar estrategias detalladas. Queda de tu mano y de la de tu equipo definir e impulsar las acciones y pr√°cticas necesarias para no caer en el pozo de la deuda t√©cnica.\nü§î ¬øPor qu√© es importante llamar a las cosas por su nombre? Asignar con precisi√≥n los conceptos nos conduce a descubrir soluciones m√°s efectivas para los desaf√≠os cotidianos que enfrentamos.\nAl revisar la lista anterior de situaciones distintas a la deuda t√©cnica, podemos notar que cada elemento presenta peculiaridades √∫nicas y requiere enfoques diferentes:\nErrores (Bugs): Encarar eficazmente los errores recurrentes implica contar con un s√≥lido sistema de monitorizaci√≥n u observabilidad que alerte de manera oportuna sobre incidencias, proyectos con una buena bater√≠a de tests y fomentar la simplicidad en nuestro dominio. Actualizaci√≥n de dependencias: En la actualidad, existen herramientas que facilitan enormemente esta tarea, desde bots que nos alertan sobre nuevas versiones de nuestras dependencias, hasta sistemas de detecci√≥n est√°tica y din√°mica de vulnerabilidades. Es esencial conocer a fondo las tecnolog√≠as que utilizamos y evitar incluir software de terceros a menos que sea verdaderamente necesario. C√≥digo heredado: No hay soluciones m√°gicas en este punto. Si el c√≥digo heredado es problem√°tico, debemos abordarlo de manera r√°pida y precisa desde el principio, asignando todos los recursos disponibles. No esperes lograr frutos sorprendentes con peque√±as mejoras. Los proyectos heredados de baja calidad son una carga para el equipo y pueden dar como resultado la p√©rdida de talento en la empresa. La decisi√≥n est√° en tus manos. Deuda t√©cnica antigua: Si las tareas son tan antiguas que desconoces su origen o la persona que report√≥ la incidencia, mi recomendaci√≥n ser√≠a eliminarlas directamente, reconsiderar la situaci√≥n actual y crear nuevas tareas con el contexto actualizado. Nuevos acuerdos: En el √°mbito de los nuevos acuerdos, siempre es efectivo implementar medidas que dificulten su incumplimiento. Esto puede lograrse mediante la creaci√≥n de tests de arquitectura, el uso de herramientas de linting correctamente configuradas, la promoci√≥n de t√©cnicas de trabajo como el pair/mob programming, o la adopci√≥n de una cultura de refactorizaci√≥n que no requiera la creaci√≥n expl√≠cita de tareas para su realizaci√≥n. ‚ûï En resumen El concepto \u0026ldquo;deuda t√©cnica\u0026rdquo; en el desarrollo de software ha perdido su esencia. Durante mucho tiempo se ha utilizado sistem√°ticamente de manera incorrecta para describir problemas que no son compromisos propios.\nConsidero que los errores, las actualizaciones de dependencias, las mejoras pendientes, el c√≥digo heredado o los cambios en acuerdos de equipo no son deuda t√©cnica. Y propongo una definici√≥n m√°s precisa: una decisi√≥n voluntaria que implica un compromiso fijado en el tiempo para resolver un problema espec√≠fico. Catalogar correctamente los conceptos es crucial para encontrar soluciones adecuadas y evitar malentendidos en el desarrollo de software.\nPor √∫ltimo, y ya que al tratar sobre estos conceptos siempre se usan s√≠miles econ√≥micos, me gustar√≠a acabar con una cita de David Graeber de su libro En deuda, que al hablar sobre su cancelaci√≥n dice:\n\u0026hellip; recordarnos a nosotros mismos que el dinero no es inefable, que pagar las deudas no es la esencia de la moral, que todo esto son cosas que hemos decidido hacer de determinada manera los humanos y que, si algo significa la democracia, es la capacidad de ponernos de acuerdo entre todos para hacer las cosas de otra manera.\nEspero que te haya gustado. Si es as√≠, estamos en deuda.\n","permalink":"https://mdlcs.dev/posts/2024-01-tech-debt/","summary":"Nota: Se trata de un art√≠culo de opini√≥n basado en mis conocimientos y experiencias a d√≠a de hoy (2024). Mi perspectiva sobre la industria del software cambia con el tiempo. Es una reflexi√≥n que no busca ofrecer soluciones concretas, sino presentar una visi√≥n del problema.\nüé¨ Un concepto en boca de todas Nos encanta hablar de deuda t√©cnica. Es un concepto propio, de nuestro nicho de conocimiento.\nPertenezcas a la empresa a la que pertenezcas, sea cual sea el evento IT al que asistas, las conversaciones sobre deuda t√©cnica est√°n ah√≠, a la vuelta de la esquina, acechando, esperando atraparte.","title":"El problema de la deuda (t√©cnica)"},{"content":"üê• LVL.01 - Preguntas b√°sicas Las preguntas que listo a continuaci√≥n no deber√≠an formar parte del proceso de entrevistas sino de la descripci√≥n de la oferta a la que uno se presenta. Si me apur√°is, deber√≠a haber legislaci√≥n al respecto para que estos datos sean parte obligatoria en la descripci√≥n de cualquier empleo.\nModo: ¬øPresencial, h√≠brido, teletrabajo, trabajo remoto? Salario: ¬øC√∫al es el rango salarial de la oferta? ¬øHay bonificaciones variables? Vacaciones: ¬øCu√°ntos d√≠as de vacaciones ofrece la empresa? ¬øHay d√≠as especiales de vacaciones: cumplea√±os, nochebuena y/o nochevieja, libre disposici√≥n, conciliaci√≥n? Beneficios: ¬øFormaci√≥n, seguro m√©dico, ticket restaurante, clases de ingl√©s, presupuesto para trabajo remoto, asistencia a eventos IT, otros? Menci√≥n especial a las ofertas con rangos salariales ampl√≠simos o con valores indeterminados del tipo \u0026ldquo;seg√∫n val√≠a\u0026rdquo;. No recomiendo aceptar una respuesta de este tipo ya que se podr√≠a considerar una falta de respeto a vuestro inter√©s por la oferta o a vuestro tiempo libre. Y por experiencia, no se√°is los primeros en comunicar expectativas salariales en el caso de no contar con esa informaci√≥n.\nüïµÔ∏è‚Äç‚ôÄÔ∏è LVL.02 - ¬øC√≥mo es el trabajo en el d√≠a a d√≠a? En el siguiente nivel es fundamental entender el d√≠a a d√≠a en el posible nuevo puesto de trabajo, as√≠ como conocer cuestiones b√°sicas del funcionamiento de la empresa.\nComenzar a trabajar en un lugar nuevo nos lleva a tratar con nuevas personas y forjar relaciones entre diferentes departamentos, por ello, los flujos de comunicaci√≥n son determinantes.\nHorario: ¬øCu√°l es el horario de trabajo m√°s habitual? ¬øSe realizan horarios especiales intensivos: viernes, meses de verano, navidad? D√≠a de trabajo: ¬øPodr√≠as describir como ser√≠a un d√≠a t√≠pico trabajando en el proyecto (reuniones, tiempo de foco para trabajar)? Onboarding: ¬øC√≥mo ser√° mi proceso de onboarding? Evoluci√≥n y responsabilidades: ¬øQu√© esper√°is de la persona que opte al puesto que est√°is ofertando? ¬øCu√°l es la evoluci√≥n √≥ptima que manej√°is? Otros equipos: ¬øSe dispone de un equipo de sistemas / plataforma / QA / incidencias independiente? ¬øTen√©is roles transversales en tecnolog√≠a (engineering manager, solutions architect, \u0026hellip;)? Retos empresa: ¬øCu√°l es el reto actual m√°s importante al que se enfrenta el equipo / departamento / empresa? Eventos: ¬øHay reuniones recurrentes del tipo \u0026lsquo;company meeting\u0026rsquo; o \u0026rsquo;team building\u0026rsquo;? ¬øC√≥mo suelen ser? ¬øCon qu√© periodicidad? ¬øSe pueden rechazar? Viajes: ¬øSe hace cargo la empresa de los gastos y la reserva de transporte/alojamiento cuando hay que viajar? Con este bloque de peguntas pretendo conocer c√≥mo de engrasada est√° la maquinaria burocr√°tica. Cuesta aceptar a veces que determinados problemas de productividad nacen de procesos extremadamente tediosos o poco afinados, exceso de reuniones o micro-management. A este respecto la Ley de Conway sigue plenamente vigente.\nü§´ LVL.03 - Descubre aquello que no te quieren contar En este √∫ltimo bloque me reservo un conjunto de preguntas algo m√°s controvertidas que en muchos casos las empresas ofertantes de empleo suelen \u0026rsquo;evitar\u0026rsquo;.\nComo asistente a numerosos eventos del sector IT uno siempre encuentra que las compa√±√≠as promocionan aquello de lo que se sienten orgullosas pero omiten deliberadamente informaci√≥n muy importante que puede llegar a impactar directamente en tu calidad de vida.\nDe nada sirve que anuncies a bombo y platillo tus 7 cl√∫sters de Kubernetes si despu√©s tus empleados tienen equipos inform√°ticos con 4GB de RAM o si van a recibir 5 llamadas cada madrugada cuando est√©n de oncall.\nGuardias: ¬øHay guardias? ¬øActivas o pasivas? ¬øCon qu√© periodicidad? ¬øCu√°l es la compensaci√≥n extra por realizarlas? ¬øCu√°ntas incidencias se notifican de media por semana / mes? Hardware: ¬øCu√°les son las herramientas hardware para trabajar? ¬øSe trabaja a trav√©s de un equipo compartido? ¬øSe dispone de sistemas como VPN o SSO? Software: ¬øCu√°les son las licencias software de servicios o herramientas (IntelliJ, Postman, etc) que utiliz√°is en el d√≠a a d√≠a? Rotaci√≥n y promoci√≥n: ¬øCu√°l es la antig√ºedad media de los miembros en plantilla o en el equipo? ¬øDispon√©is de planes de movilidad interna dentro de la empresa? ¬øC√≥mo funcionan los procesos de promoci√≥n? Observabilidad: ¬øQu√© software de observabilidad ten√©is? ¬øQu√© m√©tricas manej√°is en el d√≠a a d√≠a? Estrategia y planificaci√≥n: ¬øQui√©n decide o prioriza la estrategia de negocio? ¬øCada cu√°nto cambia o se re-analiza? ¬øNorth Star para el equipo / departamento / compa√±√≠a? Outboarding: ¬øTen√©is proceso de outboarding? ¬øC√≥mo gestion√°is la marcha de empleados? Documentaci√≥n: ¬øCu√°l es vuestra estrategia de documentaci√≥n? ¬øC√≥mo os asegur√°is de que el conocimiento se comparte y llega a diferentes √°reas de la empresa? ¬øCuid√°is vuestro lenguaje ubicuo? ¬øC√≥mo luch√°is contra los silos de informaci√≥n? Cultura de equipo: Estrategia de testing / branching model, tiempo de formaci√≥n o mejora continua, feedback interno, plan de carrera. Por experiencia, muchas de estas preguntas descolocan y derivan en situaciones tensas e incluso desagradables durante las entrevistas. Mi objetivo es que manej√©is ejemplos sobre qu√© preguntar cuando teng√°is dudas fundadas en alg√∫n aspecto clave.\nEn mi humilde opini√≥n, habiendo estado en ambos lados de un proceso de contrataci√≥n, la formulaci√≥n de preguntas denota inter√©s por el puesto y nunca deber√≠a ser considerada un ataque.\n‚ûï En resumen Una entrevista deber√≠a ser algo as√≠ como una conversaci√≥n amistosa entre dos partes interesadas en compartir un futuro laboral. En dicho proceso es fundamental hacer preguntas para conocer detalles sobre el puesto que te est√°n ofertando.\nMi recomendaci√≥n es que te prepares intentando conocer informaci√≥n b√°sica de la empresa para la que te postulas y que seas honesto y cercano durante las entrevistas. No te olvides tampoco de tomar notas sobre todo lo que te compartan en las diferentes fases de un proceso de selecci√≥n.\nY cuando llege ese momento de \u0026quot;¬øTienes alguna pregunta para nosotros?\u0026quot;, ya sabes lo que hacer. Pregunta.\n","permalink":"https://mdlcs.dev/posts/2024-01-interview-questions/","summary":"üê• LVL.01 - Preguntas b√°sicas Las preguntas que listo a continuaci√≥n no deber√≠an formar parte del proceso de entrevistas sino de la descripci√≥n de la oferta a la que uno se presenta. Si me apur√°is, deber√≠a haber legislaci√≥n al respecto para que estos datos sean parte obligatoria en la descripci√≥n de cualquier empleo.\nModo: ¬øPresencial, h√≠brido, teletrabajo, trabajo remoto? Salario: ¬øC√∫al es el rango salarial de la oferta? ¬øHay bonificaciones variables?","title":"¬øTienes alguna pregunta para nosotros?"},{"content":"Aqu√≠ hallar√°s una breve selecci√≥n de los libros que estoy leyendo actualmente, aquellos que tengo en mente para el futuro, y los que ya he terminado. Esta lista refleja mis preferencias y necesidades, por lo que es subjetiva.\nSi tienes alguna recomendaci√≥n o comentario sobre los t√≠tulos, no dudes en contactarme en redes sociales. Gradualmente ampliar√© la recopilaci√≥n con m√°s t√≠tulos.\nLeyenda: Estado üö¶ (üî¥ no empezado, üü° en progreso, üü¢ terminado).\nTabla de contenidos\nTop 5 estrellas Ingenier√≠a, arquitectura y buenas pr√°cticas Java y Kotlin Domain-driven design Agile, XP, Lean Management y psicolog√≠a Tecnolog√≠as Varios Top 5 estrellas The Pragmatic Programmer 20th Ann Effective Java 3rd Ed This is Lean: Resolving the efficiency paradox Utop√≠a para realistas Menos es m√°s Ingenier√≠a, arquitectura y buenas pr√°cticas T√≠tulo, autor üö¶ Nota The Pragmatic Programmer 20th Ann, de Andy Hunt y David Thomas üü¢ 5Ô∏è‚É£‚≠ê Modern software engineering, de David Farley üü¢ 4Ô∏è‚É£‚≠ê Get Your Hands Dirty on Clean Architecture 2nd Ed, de Tom Hombergs üü¢ 4Ô∏è‚É£‚≠ê A Philosophy of Software Design, de John Ousterhout üü¢ 3Ô∏è‚É£‚≠ê Tidy First?, de Kent Beck üü° ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Refactoring 2nd Ed, de Martin Fowler üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Staff Engineer, de Will Larson y Tanya Reilly üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Java y Kotlin T√≠tulo, autor üö¶ Nota Effective Java 3rd Ed, de Joshua Bloch üü° 5Ô∏è‚É£‚≠ê Atomic Kotlin, de Bruce Eckel y Svetlana Isakova üü° ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Effective Kotlin 2nd Ed, de Marcin Moskala üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Domain-driven design T√≠tulo, autor üö¶ Nota Domain-Driven Design Distilled, de Vaughn Vernon üü¢ 4Ô∏è‚É£‚≠ê Patterns, Principles and Practices of Domain-Driven Design, de Scott Millett y Nick Tune üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Agile, XP, Lean T√≠tulo, autor üö¶ Nota This is Lean: Resolving the efficiency paradox, de Nickas Modig üü¢ 5Ô∏è‚É£‚≠ê Extreme Programming Explained, de Kent Beck y Cynthia Andres üü° ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è The Agile Samurai, de Jonathan Rasmusson üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Management y psicolog√≠a T√≠tulo, autor üö¶ Nota Drive: The Surprising Truth About What Motivates Us, de Daniel H. Pink üü¢ 4Ô∏è‚É£‚≠ê ¬°S√≠!, de Noah J. Goldstein, Steve J. Martin y Robert B. Cialdini üü¢ 4Ô∏è‚É£‚≠ê Nuestra mente nos enga√±a, de Helena Matute üü¢ 3Ô∏è‚É£‚≠ê Mide lo que importa, de John Doerr üü¢ 3Ô∏è‚É£‚≠ê Give and Take, de Adam M. Grant üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è C√≥mo ganar amigos e influir sobre las personas, de Dale Carnegie üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Pensar r√°pido, pensar despacio, de Daniel Kahneman üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Engineering management for the rest of us, de Sarah Drasner üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Tecnolog√≠as T√≠tulo, autor üö¶ Nota Kafka: The Definitive Guide 2nd Ed, de Gwen Shapira y m√°s üü° ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Designing Data-Intensive Applications, de Martin Kleppmann üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Patterns of Distributed Systems, de Unmesh Joshi üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Varios T√≠tulo, autor üö¶ Nota Utop√≠a para realistas, de Rutger Bregman üü¢ 5Ô∏è‚É£‚≠ê Menos es m√°s, de Jason Hickel y Clara Mistral üü¢ 5Ô∏è‚É£‚≠ê Al menos tienes trabajo, de Naiara Puertas üü¢ 4Ô∏è‚É£‚≠ê Pensar en sistemas, de Donella H. Meadows üü¢ 4Ô∏è‚É£‚≠ê Armas de destrucci√≥n matem√°tica, de Cathy O\u0026rsquo;Neil üü¢ 4Ô∏è‚É£‚≠ê Upgrade, de M. Quintana y D. Alay√≥n üü¢ 4Ô∏è‚É£‚≠ê Data Science, de John D. Kelleher y Brendan Tierney üü¢ 3Ô∏è‚É£‚≠ê The Art of Statistics: How to Learn from Data, de David Spiegelhalter üü° ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è El mundo sin fin, de Jancovici üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Cybersecurity, de Duane C. Wilson üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è El economista camuflado, de Tim Harford üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è Good Strategy Bad Strategy: The Difference and Why It Matters, de Richard P. Rumelt üî¥ ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è ","permalink":"https://mdlcs.dev/books/","summary":"Aqu√≠ hallar√°s una breve selecci√≥n de los libros que estoy leyendo actualmente, aquellos que tengo en mente para el futuro, y los que ya he terminado. Esta lista refleja mis preferencias y necesidades, por lo que es subjetiva.\nSi tienes alguna recomendaci√≥n o comentario sobre los t√≠tulos, no dudes en contactarme en redes sociales. Gradualmente ampliar√© la recopilaci√≥n con m√°s t√≠tulos.\nLeyenda: Estado üö¶ (üî¥ no empezado, üü° en progreso, üü¢ terminado).","title":"Club de lectura"},{"content":"üìô TeachTech TeachTech es una iniciativa sin √°nimo de lucro en la que varios profesionales del sector nos reunimos y organizamos para ense√±ar a programar desde cero a personas con pocos o nulos conocimientos en la materia que buscan nuevos retos. Los contenidos del curso est√°n relacionados con el ecosistema web: HTML, CSS y Javascript.\nPuedes echar un vistazo a nuestra web si quieres. En ella en ocasiones escribo alguna entrada que pueda ser √∫til a nuestros alumnos y alumnas. üëá\nPosts üìù Conoce los distintos caminos del sector IT Repositorios ü§ñ Wordle-101 ü§ñ Static-Catalog-101 ","permalink":"https://mdlcs.dev/more-content/","summary":"üìô TeachTech TeachTech es una iniciativa sin √°nimo de lucro en la que varios profesionales del sector nos reunimos y organizamos para ense√±ar a programar desde cero a personas con pocos o nulos conocimientos en la materia que buscan nuevos retos. Los contenidos del curso est√°n relacionados con el ecosistema web: HTML, CSS y Javascript.\nPuedes echar un vistazo a nuestra web si quieres. En ella en ocasiones escribo alguna entrada que pueda ser √∫til a nuestros alumnos y alumnas.","title":"M√°s contenido"}]